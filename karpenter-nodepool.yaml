# karpenter-nodepool.yaml
apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: default
spec:
  # 템플릿 설정
  template:
    metadata:
      labels:
        karpenter.sh/nodepool: default
    spec:
      # 노드 요구사항
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]
        - key: node.kubernetes.io/instance-type
          operator: In
          values: ["t3.medium", "t3.large", "t3.xlarge", "m5.large", "m5.xlarge"]
      
      # 노드 클래스 참조
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        name: default
  
  # 제한사항
  limits:
    cpu: 1000
    memory: 1000Gi
  
  # 중단 설정
  disruption:
    consolidationPolicy: WhenUnderutilized
    consolidateAfter: 30s
    expireAfter: 30m

---
# karpenter-ec2nodeclass.yaml
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: default
spec:
  # AMI 패밀리
  amiFamily: AL2023
  
  # 서브넷 선택기 - 클러스터 이름으로 태그된 서브넷 선택
  subnetSelectorTerms:
    - id: subnet-05debc08a249d8c0d
    - id: subnet-0005ba7fed0b87805  
  
  # 보안 그룹 선택기 - 클러스터 이름으로 태그된 보안 그룹 선택
  securityGroupSelectorTerms:
    - id: sg-0f6bacca39650f9e6  # 실제 클러스터 이름으로 변경
  
  # IAM 인스턴스 프로파일
  role: "KarpenterNodeInstanceProfile"
  
  # 사용자 데이터
  userData: |
    #!/bin/bash
    /etc/eks/bootstrap.sh your-cluster-name
    
    # 추가 설정이 필요한 경우 여기에 추가
    echo "Node bootstrapped successfully"
  
  # 블록 디바이스 매핑
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 20Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  
  # 태그
  tags:
    Environment: production
    Team: platform
    Project: flask-app
    Region: ap-northeast-2

---
# hpa.yaml - Horizontal Pod Autoscaler (선택사항)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: flask-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flask-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 4
          periodSeconds: 15
      selectPolicy: Max